<Page x:Class="Junisha_CSharp_Zero_App0.PageFolder.Chapter_9_Page"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Junisha_CSharp_Zero_App0.PageFolder"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      Title="Chapter_9_Page">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="0.05*"/>
            <RowDefinition Height="1*" MaxHeight="1000"/>
            <RowDefinition Height="0.05*"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.1*"/>
            <ColumnDefinition Width="0.6*" MaxWidth="800"/>
            <ColumnDefinition Width="0.1*"/>
        </Grid.ColumnDefinitions>

        <ScrollViewer Grid.Row="1" Grid.Column="1">
            <Border Margin="10" Padding="0" CornerRadius="10" Grid.Row="1" Grid.Column="1"
                Background="#31363F"  BorderBrush="#76ABAE" BorderThickness="5">
                <StackPanel>
                <StackPanel Margin="10" x:Name="Text_1_Block" Visibility="Visible">
                    <TextBlock Foreground="#76ABAE" Text="Глава 9 – Циклы While и For" HorizontalAlignment="Center" Margin="10" FontSize="20" FontWeight="Bold"/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Как я упоминал в прошлой главе – без циклов с массивами трудно работать. А если точнее, вообще не выйдет, тк мы тут делаем миленькие массивы на штук 10-20 значений, хотя они могут спокойно тысячи, а для нейронок это уходит дальше миллионов значений."/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Простыми методами, где мы обращаемся к конкретной переменной, которую знаем заранее, создание простой программы что увеличит значение на 1 у каждого элемента может занять часы… Или пару минут с помощью цикла For:"/>
                    <Image Source="/Resource/Image/Цикл1.png" Margin="40"/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Циклы – это кусочек кода, что повторяется несколько раз, в случаи выше условие такое:"/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Создаётся i что равно 0, дальше проверяется что оно меньше длины массива (это как со строками, и в данном случае оно скажет что массив равен 5), дальше запускается код под ним, что берёт число из массива по номеру равное i и прибавляет 10 и под конец i++ увеличит i на 1, а цикл не обнуляет i и будет и дальше увеличивать его значение прогоняя все переменные массива через этот код внизу."/>
                        <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Этот цикл может работать с любой длиной массива, так что теперь вы можете буквально создать массив длинной с тысячью элементов и спокойно его менять!)"/>
                        
                        <Button x:Name="Question5_Check" Width="50" Margin="20 25" HorizontalAlignment="Left"
                                    VerticalAlignment="Top" Content="Далее" Click="Question5_Check_Click">
                            <Button.Resources>
                                <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedButton}">
                                    <Setter Property="Padding" Value="3"/>
                                    <Setter Property="Background" Value="#0076ABAE"/>
                                    <Setter Property="BorderThickness" Value="3"/>
                                    <Setter Property="Foreground" Value="{StaticResource BtnGrayBrush}"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource BtnGrayBrush}"/>
                                </Style>
                            </Button.Resources>
                        </Button>
                </StackPanel>

                    <StackPanel x:Name="StackBlock5" Visibility="Hidden" Height="0">
                        <TextBlock Name="Text5" Foreground="{StaticResource BtnBlueBrush}" TextWrapping="Wrap" HorizontalAlignment="Center"
                                   Margin="10" Width="650" FontSize="16"/>
                        <StackPanel x:Name="Quest5" Visibility="Visible">
                            <TextBlock Text="Задача со слайдером:" Foreground="{StaticResource BtnBlueBrush}" HorizontalAlignment="Center" Margin="10" FontSize="20" FontWeight="Bold"/>
                            <TextBlock Text="Давай добавим этой теме немного наглядности:" Foreground="{StaticResource BtnBlueBrush}" HorizontalAlignment="Center" Margin="10" FontWeight="Light"/>
                            <TextBlock Text="Первый слайдер отвечает за i, второй за N. Сам цикл привязан к этой формуле: i += i + N" Foreground="{StaticResource BtnBlueBrush}" HorizontalAlignment="Center" Margin="10" FontWeight="Light"/>

                            <TextBlock Text="N = n       M = m" Name="SliderNumbers" Foreground="{StaticResource BtnGreenBrush}" HorizontalAlignment="Center" Margin="10" FontWeight="Light"/>

                            <Slider Minimum="0"  Maximum="100" TickFrequency="{Binding DiscreteHorizontal.TickFrequency}" Height="30" Foreground="{StaticResource BtnGreenBrush}"
                                    TickPlacement="BottomRight" Value="40" Name="Slider1" ValueChanged="Slider_ValueChanged" Margin="50 0"/>

                            <Slider Minimum="0"  Maximum="100" TickFrequency="{Binding DiscreteHorizontal.TickFrequency}" Height="30" Foreground="{StaticResource BtnGreenBrush}"
                            TickPlacement="BottomRight" Value="40" Name="Slider2" ValueChanged="Slider_ValueChanged" Margin="50 0"/>

                            <TextBlock Text="i += i + N" Foreground="{StaticResource BtnGreenBrush}" HorizontalAlignment="Center" Name="CyclesTxt" Margin="10" FontWeight="Light"/>
                            
                        </StackPanel>
                    </StackPanel>

                    <StackPanel Margin="10" x:Name="Text_2_Block" Visibility="Hidden" Height="0">
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Но for не единственный цикл. While делает почти тоже самое, но с парой отличий:"/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            -	For проводит определённое заранее количество циклов. В прошлом примере с массивом он просто брал это значение из длины массива и рано или поздно закончит."/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            -	В свою очередь While будет работать пока не будет выполнено условие, теоретически вечно выполнять свою функцию, что кстати чревата лагами и вылетами."/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Вот как выглядит цикл While что будет повторяться раз 5, но для понимания его могущества уберём i++"/>
                    <Image Source="/Resource/Image/Цикл1.png" Margin="40"/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Теперь каждый цикл, будет выводиться число, но тк оно не увеличивается, то условие не будет исполнено, то бишь = этот цикл будет повторятся вечно. Что, по сути, ошибка и неприятная кстати."/>
                    <Image Source="/Resource/Image/Цикл1.png" Margin="40"/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Так что с While нужно соблюдать осторожность, хотя вы можете создать лаги и с For, так что следите за логикой кода обоих циклов."/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            И всё же – А зачем While, когда есть For?"/>
                    <TextBlock Foreground="#76ABAE" TextWrapping="Wrap" HorizontalAlignment="Center" Margin="10" Width="650" FontSize="16" Text="            Всё просто – не всегда будет понятно сколько нужно будет циклов, и тут может пригодится While, что может повторить себя хоть раз 5 хоть 5.000.000 раз и не сломаться (только предупредите перед запуском, чтоб я успел бы отойти за стенку)."/>
                    <Button x:Name="Btn_Next" Content=" Следущая глава " Margin="10" MinWidth="30" MinHeight="30" Grid.RowSpan="2" Grid.ColumnSpan="2" HorizontalAlignment="Left" VerticalAlignment="Top" Click="Btn_Next_Click">
                        <Button.Resources>
                            <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedButton}">
                                <Setter Property="Padding" Value="3"/>
                                <Setter Property="Background" Value="#0076ABAE"/>
                                <Setter Property="BorderThickness" Value="3"/>
                                <Setter Property="Foreground" Value="{StaticResource BtnOrangeBrush}"/>
                                <Setter Property="BorderBrush" Value="{StaticResource BtnOrangeBrush}"/>
                            </Style>
                        </Button.Resources>
                    </Button>
                    </StackPanel>
                </StackPanel>
            </Border>
        </ScrollViewer>


        <Button x:Name="Btn_Back" Margin="10"
                MinWidth="30" MinHeight="30" 
                Grid.RowSpan="2" Grid.ColumnSpan="2"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Click="Btn_Back_Click">
            <Button.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedButton}">
                    <Setter Property="Padding" Value="3"/>
                    <Setter Property="Background" Value="#0076ABAE"/>
                    <Setter Property="BorderBrush" Value="{StaticResource BtnBlueBrush}"/>
                    <Setter Property="BorderThickness" Value="3"/>
                </Style>
            </Button.Resources>
            <Image Source="/Resource/Undo-64 (1).png" HorizontalAlignment="Center"/>
        </Button>
    </Grid>
</Page>
